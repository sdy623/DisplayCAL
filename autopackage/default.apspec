# -*- shell-script -*-
# Generated by mkapspec 0.5
[Meta]
ShortName: dispcalgui
SoftwareVersion: `python -c "from dispcalGUI import meta;print meta.version"`
DisplayName: dispcalGUI - Display Calibration
RootName: @dispcalgui.hoech.net/dispcalgui:$SOFTWAREVERSION
RootInstallOnly: No
URL: http://dispcalGUI.hoech.net
Summary: A graphical user interface for the Argyll CMS display calibration utilities
Maintainer: Florian Höch <dispcalGUI@hoech.net>
Packager: Florian Höch <dispcalGUI@hoech.net>
PackageVersion: 1
CPUArchitectures: x86 x86_64
AutopackageTarget: 1.4
Type: Application
License: GNU General Public License (GPL)

[Description]
A graphical user interface for the Argyll CMS display calibration utilities.

[BuildPrepare]
# If you're using autotools, the default should be enough.
# prepareBuild will set up apbuild and run configure for you. If you
# need to pass arguments to configure, just add them to prepareBuild:
# prepareBuild --enable-foo --disable-bar

export CC=apgcc

python setup.py clean --all --use-distutils

python setup.py build_py build_scripts --use-distutils

python setup.py install --no-compile --use-distutils \
	--root="$build_root" \
	--prefix=/usr \
	--doc-layout=generic \
	--exec-prefix=/usr \
	--install-data=/share \
	--install-lib=/lib/python/site-packages \
	--install-scripts=/bin \
	--skip-build \
	--skip-instrument-configuration-files \
	--skip-postinstall

cp $source_dir/dispcalGUI/RealDisplaySizeMM.py*.so.tar "$build_root/lib/python/site-packages/dispcalGUI"

# udev/hotplug
mkdir -p "$build_root/share/dispcalGUI/usb"
# USB and serial instruments using udev, where udev already creates /dev/bus/usb/00X/00X devices
cp -f "misc/92-Argyll.rules" "$build_root/share/dispcalGUI/usb/92-Argyll.rules"
# USB using udev, where there are NOT /dev/bus/usb/00X/00X devices
cp -f  "misc/45-Argyll.rules" "$build_root/share/dispcalGUI/usb/45-Argyll.rules"
# USB using hotplug and Serial using udev (older versions of Linux)
cp -f "misc/Argyll" "$build_root/share/dispcalGUI/usb/Argyll"
cp -f "misc/Argyll.usermap" "$build_root/share/dispcalGUI/usb/Argyll.usermap"


[BuildUnprepare]
# If you're using prepareBuild above, there is no need to change this!
# unprepareBuild


[Globals]
# Variables declared in this section will be available in all other sections


[Prepare]
function requireLibs() {
	pushOptE; set +e;
	for lib in $*; do
		outputTest $lib
		if `testForLib $lib.so`; then
			outputTestPass
		else
			outputTestFail
			outputFail "Required library not found."
			popOptE
			return 1
		fi
	done
	popOptE
	return 0
}

require '@python.org/python' 2.5 2.6 2.7

requireAtLeast '@wxpython.org/python-wxgtk:2.8'

requireLibs libc libdl libpthread libX11 libXau libXext libXinerama libXrandr libXrender libXxf86vm

testForPythonModule numpy || (
	testForPythonModule numarray || (
		testForPythonModule Numeric || recommendAtLeast '@numpy.scipy.org/numpy:1.1'
	)
)

removeOwningPackage "$PREFIX/bin/dispcalGUI"


[Imports]
# This command will tell makepackage what to include in the package.
# The selection comes from the files created by 'make install' or equivalent.
# Usually, you can leave this at the default
echo '*' | import


[Install]
outputStatus "Determining python version..."
python_version=`python -c "import sys;print sys.version[:3]"`

outputStatus "Determining python binary..."
python=`which python$python_version 2>/dev/null || which python`

outputStatus "Determining python library prefix..."
if [ `whoami` = "root" ]; then
	python_lib_prefix=None
else
	python_lib_prefix=\"$PREFIX\"
fi

outputStatus "Getting python library..."
platlib=`python -c "from distutils.sysconfig import get_python_lib; print get_python_lib(True, prefix=$python_lib_prefix)"`

for script in `ls bin` ; do
	outputStatus "Adjusting script shebang line for $script..."
	safeSed bin/$script "s|/usr/bin/python|$python|"
	if [ `whoami` != "root" ]; then
		outputStatus "Adjusting module search path for $script..."
		safeSed bin/$script "s|import sys|import sys\nsys.path.insert(0, '$platlib')|"
	fi
done

# Unpack binary extension module
outputStatus "Unpacking binary extension module..."
cd lib/python/site-packages/dispcalGUI
uname -m | grep "64" && (
	outputStatus "Unpacking 64-bit shared library..."
	tar -xf RealDisplaySizeMM.py$python_version.x86_64.so.tar
) || (
	outputStatus "Unpacking 32-bit shared library..."
	tar -xf RealDisplaySizeMM.py$python_version.x86.so.tar
)
rm *.tar
which strip > /dev/null 2>&1 && (
	outputStatus "Stripping unneeded symbols..."
	strip --strip-unneeded *.so
) || true
cd ../../../..

# Copy autostart entries
if [ `whoami` = "root" ]; then
	outputStatus "Installing profile loader autostart entry to /etc/xdg/autostart..."
	mkdir -p /etc/xdg/autostart
	copyFiles etc/xdg/autostart/* /etc/xdg/autostart
else
	outputStatus "Adjusting profile loader autostart entry..."
	safeSed etc/xdg/autostart/z-dispcalGUI-apply-profiles.desktop "s|Exec=dispcalGUI-apply-profiles|Exec=$PREFIX/bin/dispcalGUI-apply-profiles|"
	outputStatus "Installing profile loader autostart entry to ${XDG_CONFIG_HOME:-$HOME/.config}/autostart..."
	mkdir -p "${XDG_CONFIG_HOME:-$HOME/.config}/autostart"
	copyFiles etc/xdg/autostart/* "${XDG_CONFIG_HOME:-$HOME/.config}/autostart"
fi

# Copy pure python modules
outputStatus "Installing modules to $platlib..."
copyFiles lib/python/site-packages/* "$platlib"

# Byte-compile *.py files
outputStatus "Byte-compiling pure python modules..."
python -c "import glob
import os
from distutils.sysconfig import get_python_lib
from distutils.util import byte_compile
py = glob.glob(os.path.join(get_python_lib(True, prefix=$python_lib_prefix), 'dispcalGUI', '*.py'))
byte_compile(py, optimize=0, force=1)
byte_compile(py, optimize=1, force=1)"

installData share/dispcalGUI share/doc
installExe bin/*
installIcon share/icons/hicolor
installMan 1 share/man/man1/*
if [ `whoami` != "root" ]; then
	outputStatus "Adjusting desktop menu entry..."
	safeSed share/applications/dispcalGUI.desktop "s|Exec=dispcalGUI|Exec=$PREFIX/bin/dispcalGUI|"
fi
# installMenuItem changes the .desktop file to include so-called 'Actions' 
# which makes the menu entry vanish in recent GNOME versions after logout! So 
# we only use it to make our app appear under 'desktop applications' in 
# autopackage's 'manage 3rd party software' utility
installMenuItem "Graphics" share/applications/dispcalGUI.desktop
# Install our proper one
which xdg-desktop-menu > /dev/null 2>&1 && xdg-desktop-menu install --novendor share/applications/dispcalGUI.desktop || true

if [ `whoami` = "root" ]; then
	if [ -e "/etc/udev/rules.d" ]; then
		outputStatus "Installing udev rules..."
		ls /dev/bus/usb/*/* > /dev/null 2>&1 && (
			# USB and serial instruments using udev, where udev already creates /dev/bus/usb/00X/00X devices
			if [ ! -e "/etc/udev/rules.d/55-Argyll.rules" ]; then
				linkFile "$PREFIX/share/dispcalGUI/usb/92-Argyll.rules" "/etc/udev/rules.d/55-Argyll.rules"
			fi
		) || (
			# USB using udev, where there are NOT /dev/bus/usb/00X/00X devices
			if [ ! -e "/etc/udev/rules.d/45-Argyll.rules" ]; then
				linkFile "$PREFIX/share/dispcalGUI/usb/45-Argyll.rules" "/etc/udev/rules.d/45-Argyll.rules"
			fi
		)
	else
		if [ -e "/etc/hotplug"]; then
			# USB using hotplug and Serial using udev (older versions of Linux)
			outputStatus "Installing hotplug scripts..."
			if [ ! -e "/etc/hotplug/usb/Argyll" ]; then
				linkFile "$PREFIX/share/dispcalGUI/usb/Argyll" "/etc/hotplug/usb/Argyll"
			fi
			if [ ! -e "/etc/hotplug/usb/Argyll.usermap" ]; then
				linkFile "$PREFIX/share/dispcalGUI/usb/Argyll.usermap" "/etc/hotplug/usb/Argyll.usermap"
			fi
		fi
	fi
fi

[Uninstall]
# Leaving this at the default is safe unless you use custom commands in
# "Install" to create files. All autopackage API functions 
# that installs files are logged.

uninstallFromLog

# Determine python library prefix
if [ `whoami` = "root" ]; then
	python_lib_prefix=None
else
	python_lib_prefix=\"$PREFIX\"
fi

# Remove *.py[co]
python -c "import glob
import os
from distutils.sysconfig import get_python_lib
for pyco in glob.glob(os.path.join(get_python_lib(True, prefix=$python_lib_prefix), 'dispcalGUI', '*.py[co]')):
	os.remove(pyco)"

# Remove menu entry
which xdg-desktop-menu > /dev/null 2>&1 && xdg-desktop-menu uninstall dispcalGUI.desktop || true

