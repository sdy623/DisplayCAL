#!/usr/bin/env python
# -*- coding: utf-8 -*-

""" 
Set ICC profiles and load calibration curves for all configured display devices

"""

import os
import subprocess as sp
import sys

if sys.platform == "win32":
	# Setup sys.path
	# e.g. C:\Program Files\dispcalGUI\lib\library.zip if running frozen
	libpath = os.path.join(os.path.dirname(sys.executable), "library.zip")
	if os.path.exists(libpath):
		sys.path.insert(0, libpath)
	# or if running from source
	srcpath = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..")
	if os.path.exists(os.path.join(srcpath, "dispcalGUI", "__init__.py")):
		sys.path.insert(0, srcpath)
	# Otherwise, assume to be installed in Lib\site-packages, which is
	# already on sys.path - nothing to be done

	# Do not show a glimpse of the subprocess' console window
	startupinfo = sp.STARTUPINFO()
	startupinfo.dwFlags |= sp.STARTF_USESHOWWINDOW
	startupinfo.wShowWindow = sp.SW_HIDE
else:
	startupinfo = None

from dispcalGUI import config, localization as lang
from dispcalGUI.config import geticon
from dispcalGUI.util_os import which
from dispcalGUI.worker import get_argyll_util
from dispcalGUI.wxwindows import InfoDialog, wx


DISPWIN_NOT_FOUND = 1
CAL_LOAD_ERROR = 2
PROFILE_LOAD_ERROR = 4


def apply_profiles():
	retcode = None
	if sys.platform == "win32":
		errcode = CAL_LOAD_ERROR
	else:
		errcode = PROFILE_LOAD_ERROR

	if sys.platform != "win32":
		# gcm-apply sets the _ICC_PROFILE root window atom for the first screen, 
		# per-output xrandr _ICC_PROFILE properties (if xrandr is working) and 
		# loads the vcgt for all configured screens (device-profiles.conf)
		gcm_apply = which("gcm-apply")
		if gcm_apply:
			retcode = sp.call([gcm_apply])
			if retcode != 0:
				retcode = errcode

		if retcode != 0:
			# oyranos-monitor sets _ICC_PROFILE(_n) root window atoms and loads the 
			# vcgt for all configured screens (oyranos db backend)
			oyranos_monitor = which("oyranos-monitor")
			if oyranos_monitor:
				retcode = sp.call([oyranos_monitor])
				if retcode != 0:
					retcode = errcode

	# dispwin sets the _ICC_PROFILE(_n) root window atom, per-output xrandr 
	# _ICC_PROFILE property (if xrandr is working) and loads the vcgt for the 
	# requested screen (ucmm backend using color.jcnf), and has to be called 
	# multiple times to setup multiple screens.
	#
	# If there is no profile configured in ucmm for the requested screen (or 
	# ucmm support has been removed, like in the Argyll CMS versions shipped by 
	# recent Fedora releases), it falls back to a possibly existing per-output 
	# xrandr _ICC_PROFILE property (if xrandr is working) or _ICC_PROFILE(_n) 
	# root window atom.
	dispwin = get_argyll_util("dispwin")
	if dispwin:
		process = sp.Popen([dispwin, "-?"], stdin=sp.PIPE, stdout=sp.PIPE, 
						   stderr=sp.STDOUT, startupinfo=startupinfo)
		stdout, stderr = process.communicate()
		arg = None
		display_no = 1
		for line in stdout.splitlines():
			line = line.strip().split(None, 1)
			if line and line[0].startswith("-"):
				arg = line[0]
			elif len(line) > 1 and line[1].startswith("=") and arg == "-d":
				if retcode != 0:
					# Load profile if not yet done
					if retcode is None:
						retcode = 0
					if sp.call([dispwin, "-v", "-d%i" % display_no, "-c", 
								"-L"], stdin=sp.PIPE, stdout=sp.PIPE, 
							   stderr=sp.STDOUT, startupinfo=startupinfo) != 0:
						retcode |= errcode
				# Verify the calibration was actually loaded
				process = sp.Popen([dispwin, "-v", "-d%i" % display_no, 
									"-L", "-V"], stdin=sp.PIPE, stdout=sp.PIPE, 
								   stderr=sp.STDOUT, startupinfo=startupinfo)
				stdout, stderr = process.communicate()
				if "NOT loaded" in stdout:
					retcode |= errcode
				display_no += 1
	else:
		if retcode is None:
			retcode = 0
		if sys.platform == "win32":
			retcode |= errcode
		retcode |= DISPWIN_NOT_FOUND

	return retcode


def apply_profiles_and_warn_on_error():
	retcode = apply_profiles()
	if retcode != 0:
		if not wx.GetApp():
			app = wx.App(0)
		if retcode & PROFILE_LOAD_ERROR:
			msg1 = "profile.load_error"
		elif retcode & CAL_LOAD_ERROR:
			msg1 = "calibration.load_error"
		if retcode & DISPWIN_NOT_FOUND:
			msg2 = lang.getstr("argyll.util.not_found", "dispwin")
		else:
			msg2 = ""
		InfoDialog(None, msg=" ".join([lang.getstr(msg1), msg2]), 
				   ok=lang.getstr("cancel"), 
				   bitmap=geticon(32, "dialog-error"))


def main():
	config.initcfg()
	lang.init()
	apply_profiles_and_warn_on_error()


if __name__ == "__main__":
	main()
